---
import { formatText, formatQuotes } from "../format";
import NoOverflowCode from "../NoOverflowCode.astro";

export type Prop = {
    name: string;
    required?: true | string;
    type: string;
    bindable?: true;
    defaultValue: string | undefined;
    description: string;
};

export function getARIALabelProps(componentName: string, describingWhatIt: string): Prop[] {
    return [
        {
            name: "aria-label",
            required: "label",
            type: "string",
            defaultValue: undefined,
            description: `Description of what the ${componentName} ${describingWhatIt}.`
        },
        {
            name: "aria-labelledby",
            required: "label",
            type: "string",
            defaultValue: undefined,
            description: `ID of element that describes what the ${componentName} ${describingWhatIt}.`
        }
    ];
}

export function getARIALabelOrContentProps(
    componentName: string,
    describingWhatIt: string
): Prop[] {
    return [
        {
            name: "labelledByContent",
            required: "label",
            type: "true",
            defaultValue: undefined,
            description: `Indicates the ${componentName} contains text describing what the ${componentName} ${describingWhatIt}.`
        },
        ...getARIALabelProps(componentName, describingWhatIt)
    ];
}

interface Props {
    props: Prop[];
}

const { props } = Astro.props;

let previousGroupNumber = 0;
let requiredGroups: Map<string, [number, string[]]> = new Map();

function getRequiredGroupNumber(prop: Prop) {
    if (requiredGroups.has(prop.required as string)) {
        const [groupNumber, props] = requiredGroups.get(prop.required as string)!;

        if (!props.includes(prop.name)) {
            props.push(prop.name);
        }
        return groupNumber + 1;
    }
    requiredGroups.set(prop.required as string, [previousGroupNumber++, [prop.name]]);
    return previousGroupNumber + 1;
}
---

{
    props.length === 0 ? (
        <p>No props.</p>
    ) : (
        <>
            <ul class="lg:hidden">
                {props.map((prop) => (
                    <li>
                        <div class="flex items-center gap-x-2">
                            <span>
                                <code class="!bg-orange-500 text-[var(--sl-color-white)]">
                                    {prop.name}
                                </code>
                                <code>
                                    {":"}
                                    {formatQuotes(prop.type)}
                                    {prop.defaultValue !== undefined ? (
                                        <> = {formatQuotes(prop.defaultValue)}</>
                                    ) : (
                                        ""
                                    )}
                                </code>
                            </span>{" "}
                            {typeof prop.required === "string" ? (
                                <span class="text-runic-gradient mb-2 pr-1 text-sm">
                                    ({getRequiredGroupNumber(prop)})
                                </span>
                            ) : prop.required ? (
                                <span class="text-runic-gradient pr-1 text-xl">*</span>
                            ) : (
                                ""
                            )}
                            {prop.bindable ? <span class="text-sm">(bindable)</span> : ""}
                        </div>
                        <ul class="!my-2">
                            <li set:html={formatText(prop.description)} />
                        </ul>
                    </li>
                ))}
            </ul>
            <table class="!hidden w-full lg:!block">
                <thead>
                    <tr>
                        <th>Prop</th>
                        <th>Type</th>
                        <th>Default</th>
                        <th>Description</th>
                    </tr>
                </thead>
                <tbody>
                    {props.map((prop) => (
                        <tr>
                            <td>
                                <div class="flex items-center gap-x-2">
                                    <NoOverflowCode
                                        class="!bg-orange-500 text-[var(--sl-color-white)]"
                                        code={prop.name}
                                    />
                                    {typeof prop.required === "string" ? (
                                        <span class="text-runic-gradient mb-2 text-sm">
                                            ({getRequiredGroupNumber(prop)})
                                        </span>
                                    ) : prop.required ? (
                                        <span class="text-runic-gradient text-xl">*</span>
                                    ) : (
                                        ""
                                    )}
                                </div>
                            </td>
                            <td>
                                <NoOverflowCode code={formatQuotes(prop.type)} />
                                {prop.bindable ? <p>(bindable)</p> : ""}
                            </td>
                            <td class="whitespace-nowrap">
                                {prop.defaultValue !== undefined ? (
                                    <NoOverflowCode code={prop.defaultValue} />
                                ) : (
                                    "-"
                                )}
                            </td>
                            <td set:html={formatText(prop.description)} />
                        </tr>
                    ))}
                </tbody>
            </table>
            {Array.from(requiredGroups.keys()).map((group) => {
                const [index, props] = requiredGroups.get(group)!;
                return (
                    <p class="flex items-center gap-x-2">
                        <span class="text-runic-gradient mb-2 text-sm">({index + 1})</span>- One of
                        {props.map((prop) => (
                            <NoOverflowCode
                                class="!bg-orange-500 text-[var(--sl-color-white)]"
                                code={prop}
                            />
                        ))}
                        is required.
                    </p>
                );
            })}
        </>
    )
}
