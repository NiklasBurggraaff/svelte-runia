---
import type { Props } from "@astrojs/starlight/props";
import CallToAction from "./CallToAction.astro";
import { Icon } from "@astrojs/starlight/components";
import RuneAnimation from "../RuneAnimation.astro";

const PAGE_TITLE_ID = "_top";

const { data } = Astro.props.entry;
const { title = data.title, tagline, image, actions = [] } = data.hero || {};

let darkImage: ImageMetadata | undefined;
let lightImage: ImageMetadata | undefined;
let rawHtml: string | undefined;
if (image) {
    if ("file" in image) {
        darkImage = image.file;
    } else if ("dark" in image) {
        darkImage = image.dark;
        lightImage = image.light;
    } else {
        rawHtml = image.html;
    }
}
---

<div
    class="right-0 top-0 z-10 w-full rounded-xl bg-orange-500 p-4 text-center text-xl text-gray-50 shadow-inner dark:text-gray-100"
>
    <div class="inline select-none pr-2">
        <Icon name="rocket" size="1rem" />
    </div>
    <strong>Svelte 5 ready</strong> using
    <a class="text-inherit" href="https: svelte-5-preview.vercel.app docs runes">Runes</a>!
</div>

<div class="hero">
    <div class="title py-8 text-center text-4xl">
        <h1 id={PAGE_TITLE_ID} aria-live="assertive">
            <RuneAnimation />
        </h1>
    </div>
    <div class="sl-flex stack">
        <div class="sl-flex copy">
            <h2 data-page-title set:html={title} />
            {tagline && <div class="tagline" set:html={tagline} />}
        </div>
        {
            actions.length > 0 && (
                <div class="sl-flex actions">
                    {actions.map(({ text, ...attrs }) => (
                        <CallToAction {...attrs} set:html={text} />
                    ))}
                </div>
            )
        }
    </div>
</div>

<style>
    .hero {
        display: grid;
        align-items: center;
        gap: 1rem;
        padding-bottom: 1rem;
    }

    .hero > img,
    .hero > .hero-html {
        object-fit: contain;
        width: min(70%, 20rem);
        height: auto;
        margin-inline: auto;
    }

    .stack {
        flex-direction: column;
        gap: clamp(1.5rem, calc(1.5rem + 1vw), 2rem);
        text-align: center;
    }

    .copy {
        flex-direction: column;
        gap: 1rem;
        align-items: center;
    }

    .copy > * {
        max-width: 50ch;
    }

    h1 {
        font-size: clamp(var(--sl-text-3xl), calc(0.25rem + 8vw), 8rem);
        line-height: var(--sl-line-height-headings);
        font-weight: 600;
        color: var(--sl-color-white);
        text-wrap: balance;
    }

    h2 {
        font-size: clamp(var(--sl-text-2xl), calc(0.25rem + 4vw), var(--sl-text-5xl));
        line-height: var(--sl-line-height-headings);
        font-weight: 600;
        color: var(--sl-color-white);
        text-wrap: balance;
    }

    .tagline {
        font-size: clamp(var(--sl-text-base), calc(0.0625rem + 2vw), var(--sl-text-xl));
        color: var(--sl-color-gray-2);
        text-wrap: balance;
    }

    .actions {
        gap: 1rem 2rem;
        flex-wrap: wrap;
        justify-content: center;
    }

    @media (min-width: 50rem) {
        .hero {
            grid-template-columns: 7fr 4fr;
            gap: 3%;
            padding-block: clamp(2.5rem, calc(1rem + 10vmin), 10rem);
        }

        .title {
            order: 2;
        }

        .stack {
            text-align: start;
        }

        .copy {
            align-items: flex-start;
        }

        .actions {
            justify-content: flex-start;
        }
    }
</style>
