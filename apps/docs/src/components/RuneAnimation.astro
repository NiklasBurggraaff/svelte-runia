<div class="group relative mx-auto w-fit select-none" id="rune-animation">
    <div
        class="runic-gradient left-0 top-0 grid grid-cols-5 transition-[opacity,filter] delay-100 duration-1000 group-hover:opacity-0 group-hover:blur-lg group-hover:delay-0"
    >
        {"ᚱᚢᚾᛁᚨ".split("").map((rune) => <div class="font-runic">{rune}</div>)}
    </div>
    <div
        class="runic-gradient absolute left-0 top-0 grid w-full grid-cols-5 opacity-0 transition-opacity duration-1000 group-hover:opacity-100 group-hover:delay-200 md:top-1"
    >
        {"RUNIA".split("").map((rune) => <div class="font-mono">{rune}</div>)}
    </div>
</div>

<script>
    const runes = "ᚠᚢᚦᚨᚱᚲᚷᚹᚻᚾᛁᛃᛅᛇᛉᛋᛏᛒᛖᛗᛚᛜᛞᛟ".split("");

    function generateParticle() {
        const rune = runes[Math.floor(Math.random() * runes.length)];
        const startX = Math.random() * 100;
        const startY = Math.random() * 100;
        const angle = Math.random() * Math.PI * 2;
        const distance = Math.min(Math.random() * 50 + 100, (window?.innerWidth ?? 0) / 3);
        const endX = Math.cos(angle) * distance;
        const endY = Math.sin(angle) * distance;
        const delay = Math.random() * 40;

        return {
            rune,
            startX,
            endX,
            startY,
            endY,
            delay,
            age: undefined,
            element: undefined
        };
    }

    const numParticles = 15;
    const element = document.getElementById("rune-animation");
    const particles: Array<{
        rune: string;
        startX: number;
        endX: number;
        startY: number;
        endY: number;
        delay: number;
        age: number | undefined;
        element: HTMLElement | undefined;
    }> = [];

    for (let i = 0; i < numParticles; i++) {
        particles.push(generateParticle());
    }

    if (element !== null) {
        console.log("element", element);
        setInterval(() => {
            const isReduced =
                // @ts-expect-error
                window.matchMedia(`(prefers-reduced-motion: reduce)`) === true ||
                window.matchMedia(`(prefers-reduced-motion: reduce)`).matches === true;

            for (let i = 0; i < particles.length; i++) {
                const particle = particles[i];

                if (particle.age === undefined) {
                    if (particle.delay <= 0) {
                        particle.element = document.createElement("span");
                        particle.element.classList.add(
                            "absolute",
                            "text-xs",
                            "sm:text-sm",
                            "md:text-md",
                            "lg:text-lg",
                            "opacity-50",
                            "transition-all",
                            "duration-[2000ms]",
                            "ease-in",
                            "-z-10",
                            "group-hover:opacity-0",
                            "select-none"
                        );
                        particle.element.ariaHidden = "true";
                        particle.element.style.left = `${particle.startX}%`;
                        particle.element.style.top = `calc(${particle.startY}% - 14px)`;
                        particle.element.innerText = particle.rune;
                        element.appendChild(particle.element);
                        particle.age = 0;
                    }

                    particle.delay -= 1;
                } else {
                    if (particle.age === 0 && !isReduced) {
                        particle.element!.style.transform = `translateX(${particle.endX}px) translateY(${particle.endY}px)`;
                        particle.element!.style.opacity = "0";
                    }
                    if (particle.age >= 20) {
                        element.removeChild(particle.element!);
                        particles[i] = generateParticle();
                    }
                    particle.age += 1;
                }
            }
        }, 100);
    }
</script>
